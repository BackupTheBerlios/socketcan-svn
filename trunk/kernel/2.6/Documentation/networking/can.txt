============================================================================

can.txt

Readme file for the Controller Area Network Protocol Family (aka Socket CAN)

This file contains

 1 Overview / What is Socket CAN

 2 Motivation / Why using the socket API

 3 Socket CAN concept
   3.1 receive lists
   3.2 loopback
   3.3 network security issues (capabilities)

 4 How to use Socket CAN
   4.1 RAW protocol sockets with can_filters (SOCK_RAW)
   4.2 Broadcast Manager protocol sockets (SOCK_DGRAM)
   4.3 connected transport protocols (SOCK_SEQPACKET)
   4.4 unconnected transport protocols (SOCK_DGRAM)

 5 Socket CAN core module
   5.1 can.ko module params 
   5.2 procfs content
   5.3 writing own CAN protocol modules

 6 CAN network drivers
   6.1 general settings
   6.2 loopback
   6.3 currently supported CAN hardware
   6.4 todo

 7 Credits

============================================================================

1. Overview / What is Socket CAN
--------------------------------

The socketcan package is an implementation of CAN protocols
(Controller Area Network) for Linux.  CAN is a networking technology
which has wide-spread use in automation, embedded devices, and
automotive fields.  While there have been other CAN implementations
for Linux based on character devices, Socket CAN uses the Berkeley
socket API, the Linux network stack and implements the CAN device
drivers as network interfaces.  The CAN socket API has been designed
as similar as possible to the TCP/IP protocols to allow programmers,
familiar with network programming, to easily learn how to use CAN
sockets.

2. Motivation / Why using the socket API
----------------------------------------

There have been CAN implementations for Linux before Socket CAN so the
question arises, why we have started another project.  Most existing
implementations come as a device driver for some CAN hardware, they
are based on character devices and provide comparatively little
functionality.  Usually, there is only a hardware-specific device
driver which provides a character device interface to send and
receive raw CAN frames, directly to/from the controller hardware.
Queueing of frames and higher-level transport protocols like ISO-TP
have to be implemented in user space applications.  Also, most
character-device implementations support only one single process to
open the device at a time, similar to a serial interface.  Exchanging
the CAN controller requires employment of another device driver and
often the need for adaption of large parts of the application to the
new driver's API.

Socket CAN was designed to overcome all of these limitations.  A new
protocol family has been implemented which provides a socket interface
to user space applications and which builds upon the Linux network
layer, so to use all of the provided queueing functionality.  Device
drivers for CAN controller hardware register itself with the Linux
network layer as a network device, so that CAN frames from the
controller can be passed up to the network layer and on to the CAN
protocol family module and also vice-versa.  Also, the protocol family
module provides an API for transport protocol modules to register, so
that any number of transport protocols can be loaded or unloaded
dynamically.  In fact, the can core module alone does not provide any
protocol and can not be used without loading at least one additional
protocol module.  Multiple sockets can be opened at the same time,
on different or the same protocol module and they can listen/send
frames on different or the same CAN IDs.  Several sockets listening on
the same interface for frames with the same CAN ID are all passed the
same received matching CAN frames.  An application wishing to
communicate using a specific transport protocol, e.g. ISO-TP, just
selects that protocol when opening the socket, and then can read and
write application data byte streams, without having to deal with
CAN-IDs, frames, etc.

Similar functionality visible from user-space could be provided by a
character decive, too, but this would lead to a technically inelegant
solution for a couple of reasons:

* Intricate usage.  Instead of passing a protocol argument to
  socket(2) and using bind(2) to select a CAN interface and CAN ID, an
  application would have to do all these operations using ioctl(2)s.

* Code duplication.  A character device cannot make use of the Linux
  network queueing code, so all that code would have to be duplicated
  for CAN networking.

* Abstraction.  In most existing character-device implementations, the
  hardware-specific device driver for a CAN controller directly
  provides the character device for the application to work with.
  This is at least very unusual in Unix systems, for both, char and
  block devices.  For example you don't have a character device for a
  certain UART of a serial interface, a certain sound chip in your
  computer, a SCSI or IDE controller providing access to your hard
  disk or tape streamer device.  Instead, you have abstraction layers
  which provide a unified character or block device interface to the
  application on the one hand, and a interface for hardware-specific
  device drivers on the other hand.  These abstractions are provided
  by subsystems like the tty layer, the audio subsystem or the SCSI
  and IDE subsystems for the devices mentioned above.

  The easiest way to implement a CAN device driver is as a character
  without such a (complete) abstraction layer, as is done by most
  existing drivers.  The right way, however, would be to add such a
  layer with all the functionality like registering for certain CAN
  IDs, supporting several open file descriptors and (de)multplexing
  CAN frames between them, (sophisticated) queueing of CAN frames, and
  providing an API for device driver to register with.  However, then
  it would be no more difficult, or may be even easier, to use the
  networking framework provided by the Linux kernel, and this is what
  Socket CAN does.

The use of the networking framework of the Linux kernel is just the
natural and most appropriate way to implement CAN for Linux.

3. Socket CAN concept
---------------------

  As described in chapter 2 it is the main goal of Socket CAN to
  provide a socket interface to user space applications which builds
  upon the Linux networklayer. In opposite to the commonly known
  TCP/IP and ethernet networking the CAN bus is a broadcast-only(!)
  medium that has no MAC-layer adressing like ethernet. The CAN-identifier
  (can_id) is used for arbitration on the CAN-bus. Therefore the CAN-IDs
  have to be choosen unique on the bus. When designing a CAN-ECU
  network the CAN-IDs are mapped to be sent by a specific ECU. 
  For this reason a CAN-ID can be treatened best as a kind of source address. 

  3.1 receive lists

  The network transparent access of multiple applications leads to the
  problem that different applications may be interrested in the same
  CAN-IDs from the same CAN network interface. The Socket CAN core
  module - which implements the protocol family CAN - provides several
  high efficient receive lists for this reason. If e.g. a user space
  application opens a CAN RAW socket, the raw protocol module itself
  requests the (range of) CAN-IDs from the Socket CAN core that are
  requested by the user. The subscription and unsubscription of
  CAN-IDs can be done for specific CAN interfaces or for all(!) known
  CAN interfaces with the can_rx_(un)register() functions provided to
  CAN protocol modules by the SocketCAN core (see chapter 5).
  To optimize the CPU usage at runtime the receive lists are split up
  into several specific lists per device that match the requested
  filter complexity for a given use-case. 

  3.2 loopback

  As known from other networking concepts the data exchanging
  applications may run on the same or different nodes without any
  change (except if the according addressing information):

         ___   ___   ___                   _______   ___ 
        | _ | | _ | | _ |                 | _   _ | | _ | 
        ||A|| ||B|| ||C||                 ||A| |B|| ||C|| 
        |___| |___| |___|                 |_______| |___| 
          |     |     |                       |       |
        -----------------(1)- CAN bus -(2)---------------

  To ensure that application A receives the same information in the
  expample (2) as it would receive in example (1) there is need for
  some kind of local loopback on the appropriate node. 

  The Linux network devices (by default) just can handle the
  transmission and receiption of media dependend frames. Due to the
  arbritration on the CAN bus the transmission of a low prio CAN-ID
  may be delayed from the receipition of a high prio CAN frame. To
  reflect the correct* traffic on the node the loopback of the sent
  data has to be performed right after a successful transmission. If
  the CAN network interface is not capable to perform the loopback for
  some reason the SocketCAN core can do this task as a fallback solution.    
  See chapter 6.2 for details (recommended).

  The loopback functionality is enabled by default to reflect standard
  networking behaviour for CAN applications. Due to some requests from
  the RT-SocketCAN group the loopback optionally may be disabled for each
  seperate socket. See sockopts from the CAN RAW sockets in chapter 4.1 .

  * = you really like to have this when you're running analyser tools
      like 'candump' or 'cansniffer' on the (same) node.

  3.3 network security issues (capabilities)

4. How to use Socket CAN
------------------------

Like TCP/IP, you first need to open a socket for communicating over a
CAN network.  Since Socket CAN implements a new protocol family, you
need to pass PF_CAN as the first argument to the socket(2) system
call.  Currently, there are two CAN protocols to choose from, the raw
socket protocol and the broadcast manager (BCM).  So to open a socket,
you would write

    s = socket(PF_CAN, SOCK_RAW, CAN_RAW);

and

    s = socket(PF_CAN, SOCK_DGRAM, CAN_BCM);

respectively.  After opening, you would normally use the bind(2)
system call to bind to a CAN ID, then you can read(2) and write(2)
from/to the socket or use send(2), sendto(2), sendmsg(2) and the recv*
counterpart operations on the socket as usual.  There are also CAN
specific socket options described in the bcm(7) and can-raw(7) manual
pages.  Complete documentation can be found in the LaTeX file,
currently only available in German.

   4.1 RAW protocol sockets with can_filters (SOCK_RAW)
   4.2 Broadcast Manager protocol sockets (SOCK_DGRAM)
   4.3 connected transport protocols (SOCK_SEQPACKET)
   4.4 unconnected transport protocols (SOCK_DGRAM)


5. Socket CAN core module
-------------------------

   5.1 can.ko module params 
   5.2 procfs content
   5.3 writing own CAN protocol modules

6. CAN network drivers
----------------------

   6.1 general settings
   6.2 loopback
   6.3 currently supported CAN hardware
   6.4 todo

7. Credits
----------
