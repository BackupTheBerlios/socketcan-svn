menu "CAN Device Drivers"
	depends on CAN

config CAN_VCAN
	tristate "Virtual Local CAN Interface (vcan)"
	depends on CAN
	default N
	---help---
	  Similar to the network loopback devices, vcan offers a
	  virtual local CAN interface.

	  This driver can also be built as a module.  If so, the module
	  will be called vcan.

config CAN_SLCAN
	tristate "Serial / USB serial CAN Adaptors (slcan)"
	depends on CAN && EXPERIMENTAL
	default N
	---help---
	  CAN driver for several 'low cost' CAN interfaces that are attached
	  via serial lines or via USB-to-serial adapters using the LAWICEL
	  ASCII protocol. The driver implements the tty linediscipline N_SLCAN.

	  This driver can also be built as a module.  If so, the module
	  will be called slcan.

config CAN_OLD_DRIVERS
	tristate "Prompt for old CAN drivers (e.g. no sysfs support)"
	depends on CAN
	default N
	---help---
	  The old drivers do not support sysfs nor proper platform device
	  support. Some of the old drivers might only be configured by
	  module commandline options.

if CAN_OLD_DRIVERS
source "drivers/net/can/old/Kconfig"
endif

config CAN_DEV
	tristate "Platform CAN drivers with Netlink support"
	depends on CAN
	default Y
	---help---
	  Enables the common framework for platform CAN drivers with Netlink
	  support. This is the standard library for CAN drivers.
	  If unsure, say Y.

config CAN_DEV_SYSFS
	bool "Support for sysfs interface (deprecated)"
	depends on CAN_DEV && SYSFS
	default N
	---help---
	  Adds support for the legacy sysfs interface to configure CAN
	  devices. If possible, please use the new netlink interface
	  instead.
	  If unsure, say N.

config CAN_CALC_BITTIMING
	bool "CAN bit-timing calculation"
	depends on CAN_DEV
	default Y
	---help---
	  If enabled, CAN bit-timing parameters will be calculated for the
	  bit-rate specified via Netlink argument "bitrate" when the device
	  get started. This works fine for the most common CAN controllers
	  with standard bit-rates but may fail for exotic bit-rates or CAN
	  source clock frequencies. Disabling saves some space, but then the
	  bit-timing parameters must be specified directly using the Netlink
	  arguments "tq", "prop_seg", "phase_seg1", "phase_seg2" and "sjw".
	  If unsure, say Y.

config CAN_CC770
	depends on HAS_IOMEM && CAN_DEV
	tristate "Bosch CC770 and Intel AN82527"
	---help---
	  Driver for the Bosch CC770 and the compatible Intel AN82527
	  CAN controllers.

config CAN_CC770_ISA
	depends on CAN_CC770 && ISA
	tristate "ISA Bus based legacy CC770 driver"
	---help---
	  This driver adds legacy support for CC770 and AN82527 chips
	  connected to the ISA bus using I/O port, memory mapped or
	  indirect access.

config CAN_CC770_OF_PLATFORM
	depends on CAN_CC770 && PPC_OF
	tristate "Generic OF Platform Bus based CC770 driver"
	---help---
	  This driver adds support for the CC770 and other AN82527
	  compatible chips connected to the OpenFirmware "platform bus"
	  found on embedded systems with OpenFirmware bindings, e.g. if
	  you have a PowerPC based system you may want to enable this
	  option.

config CAN_ESD_PCI331
	tristate "ESD CAN 331 Cards"
	depends on PCI && CAN_DEV
	---help---
	  This driver supports the PCI/331, CPCI/331 and PMC/331 CAN cards
	  from the esd system design gmbh (http://www.esd.eu).

config CAN_SOFTING
	tristate "Softing Gmbh CAN generic support"
	depends on CAN_DEV
	---help---
	  generic softing CAN cards
	  Sofing CAN cards come with 1 or 2 physical busses.
	  The API of the card does not allow fine control per bus, but
	  controls the 2 busses on the card together.
	  As such, some actions (start/stop/busoff recovery) on 1 bus
	  must bring down the other bus too temporarily.
	  You have been warned.
	  This driver is written on safe on 64bit, but not on big endian.

config CAN_SOFTING_CS
	tristate "Softing CAN pcmcia cards"
	depends on CAN_SOFTING && PCMCIA
	---help---
	  Support for PCMCIA cards from Softing Gmbh & some cards
	  from Vector Gmbh.
	  You need firmware for these, which you can get at
	  http://developer.berlios.de/projects/socketcan/
	  This version of the driver is written against
	  firmware version 4.6

config CAN_MSCAN
	depends on CAN_DEV && (PPC || M68K || M68KNOMMU)
	tristate "Support for a Freescale MSCAN based chips"
	---help---
	  The Motorola Scalable Controller Area Network (MSCAN) definition
	  is based on the MSCAN12 definition which is the specific
	  implementation of the Motorola Scalable CAN concept targeted for
	  the Motorola MC68HC12 Microcontroller Family.

config CAN_MPC52XX
	tristate "Freescale MPC5200 onboard CAN controller"
	depends on CAN_MSCAN && (PPC_MPC52xx || PPC_52xx)
	default LITE5200
	---help---
	  If you say yes here you get support for Freescale MPC5200
	  onboard dualCAN controller.

	  This driver can also be built as a module.  If so, the module
	  will be called mpc52xx_can.

config CAN_AT91
	tristate "Atmel AT91 onchip CAN controller"
	depends on CAN_DEV && ARCH_AT91SAM9263
	default N
	---help---
	  This is a driver for the SoC CAN controller in Atmel's AT91SAM9263.

config CAN_MCP251X
	tristate "Microchip MCP251x SPI CAN controllers"
	depends on CAN_DEV && SPI
	---help---
	  Driver for the Microchip MCP251x SPI CAN controllers.

source "drivers/net/can/sja1000/Kconfig"

source "drivers/net/can/usb/Kconfig"

config CAN_DEBUG_DEVICES
	bool "CAN devices debugging messages"
	depends on CAN
	default N
	---help---
	  Say Y here if you want the CAN device drivers to produce a bunch of
	  debug messages to the system log.  Select this if you are having
	  a problem with CAN support and want to see more of what is going
	  on.

endmenu
